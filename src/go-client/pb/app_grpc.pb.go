// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: app.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (Demo_StreamMessagesClient, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (Demo_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[0], "/lb_issue.Demo/StreamMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoStreamMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_StreamMessagesClient interface {
	Recv() (*StreamMessagesResponse, error)
	grpc.ClientStream
}

type demoStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *demoStreamMessagesClient) Recv() (*StreamMessagesResponse, error) {
	m := new(StreamMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility
type DemoServer interface {
	StreamMessages(*StreamMessagesRequest, Demo_StreamMessagesServer) error
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (UnimplementedDemoServer) StreamMessages(*StreamMessagesRequest, Demo_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).StreamMessages(m, &demoStreamMessagesServer{stream})
}

type Demo_StreamMessagesServer interface {
	Send(*StreamMessagesResponse) error
	grpc.ServerStream
}

type demoStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *demoStreamMessagesServer) Send(m *StreamMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lb_issue.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _Demo_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}
